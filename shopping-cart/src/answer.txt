1. How would you persist the cart between page refreshes?

    Store cart in localStorage (or sessionStorage) using useEffect. For multi-device sync, persist it to a backend database (via API).

2. What if there are 10,000 items in the cart?

    Use virtualized lists (react-window, react-virtualized) to only render items visible in the viewport.

3. Why use useMemo and useCallback here?

    useCallback prevents unnecessary re-renders of child components when passing handlers.
    useMemo ensures total is only recalculated when cart changes, not on every render.

4. How would you test this component?

    With React Testing Library:
    Add an item, expect cart length to increase.
    Click “+” button, expect quantity update.
    Remove item, expect it not to exist.
    Check total price updates correctly.

5. What if two users update the cart at the same time?

    With backend integration, use optimistic UI updates + server reconciliation. Example: update state immediately but confirm with API.

6. How would you make this reusable across the app?

    Extract cart logic into a Context + Reducer (useReducer), then provide <CartProvider> globally. Any component (Navbar, Checkout, etc.) can consume the cart state.